-- Spring Batch 스키마 초기화
-- Spring Batch 4.3.x 버전에 필요한 테이블들을 생성합니다.

USE msa_pay;

-- 기존 Spring Batch 테이블들을 삭제 (순서 주의: 외래키 제약조건 때문에)
DROP TABLE IF EXISTS `msa_pay`.`BATCH_STEP_EXECUTION_CONTEXT`;
DROP TABLE IF EXISTS `msa_pay`.`BATCH_JOB_EXECUTION_CONTEXT`;
DROP TABLE IF EXISTS `msa_pay`.`BATCH_STEP_EXECUTION`;
DROP TABLE IF EXISTS `msa_pay`.`BATCH_JOB_EXECUTION_PARAMS`;
DROP TABLE IF EXISTS `msa_pay`.`BATCH_JOB_EXECUTION`;
DROP TABLE IF EXISTS `msa_pay`.`BATCH_JOB_INSTANCE`;
DROP TABLE IF EXISTS `msa_pay`.`BATCH_STEP_EXECUTION_SEQ`;
DROP TABLE IF EXISTS `msa_pay`.`BATCH_JOB_EXECUTION_SEQ`;
DROP TABLE IF EXISTS `msa_pay`.`BATCH_JOB_INSTANCE_SEQ`;

-- BATCH_JOB_INSTANCE 테이블
CREATE TABLE `msa_pay`.`BATCH_JOB_INSTANCE` (
  `JOB_INSTANCE_ID` BIGINT NOT NULL PRIMARY KEY,
  `VERSION` BIGINT,
  `JOB_NAME` VARCHAR(128) NOT NULL,
  `JOB_KEY` VARCHAR(32) NOT NULL,
  constraint JOB_INST_UN unique (`JOB_NAME`, `JOB_KEY`)
) ENGINE=InnoDB;

-- BATCH_JOB_EXECUTION 테이블 (Spring Batch 4.3.x 공식 스키마)
CREATE TABLE `msa_pay`.`BATCH_JOB_EXECUTION` (
  `JOB_EXECUTION_ID` BIGINT NOT NULL PRIMARY KEY,
  `VERSION` BIGINT,
  `JOB_INSTANCE_ID` BIGINT NOT NULL,
  `CREATE_TIME` DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
  `START_TIME` DATETIME(6) DEFAULT NULL,
  `END_TIME` DATETIME(6) DEFAULT NULL,
  `STATUS` VARCHAR(10),
  `EXIT_CODE` VARCHAR(2500),
  `EXIT_MESSAGE` VARCHAR(2500),
  `LAST_UPDATED` DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  `JOB_CONFIGURATION_LOCATION` VARCHAR(2500),
  constraint JOB_INST_EXEC_FK foreign key (`JOB_INSTANCE_ID`)
  references `BATCH_JOB_INSTANCE`(`JOB_INSTANCE_ID`)
) ENGINE=InnoDB;

-- BATCH_JOB_EXECUTION_PARAMS 테이블 (Spring Batch 4.3.x 구조)
CREATE TABLE `msa_pay`.`BATCH_JOB_EXECUTION_PARAMS` (
  `JOB_EXECUTION_ID` BIGINT NOT NULL,
  `KEY_NAME` VARCHAR(100) NOT NULL,
  `TYPE_CD` VARCHAR(6) NOT NULL,
  `STRING_VAL` VARCHAR(250),
  `DATE_VAL` DATETIME(6),
  `LONG_VAL` BIGINT,
  `DOUBLE_VAL` DOUBLE,
  `IDENTIFYING` CHAR(1) NOT NULL,
  constraint JOB_EXEC_PARAMS_FK foreign key (`JOB_EXECUTION_ID`)
  references `BATCH_JOB_EXECUTION`(`JOB_EXECUTION_ID`)
) ENGINE=InnoDB;

-- BATCH_STEP_EXECUTION 테이블 (Spring Batch 4.3.x 공식 스키마)
CREATE TABLE `msa_pay`.`BATCH_STEP_EXECUTION` (
  `STEP_EXECUTION_ID` BIGINT NOT NULL PRIMARY KEY,
  `VERSION` BIGINT NOT NULL,
  `STEP_NAME` VARCHAR(128) NOT NULL,
  `JOB_EXECUTION_ID` BIGINT NOT NULL,
  `CREATE_TIME` DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
  `START_TIME` DATETIME(6) DEFAULT NULL,
  `END_TIME` DATETIME(6) DEFAULT NULL,
  `STATUS` VARCHAR(10),
  `COMMIT_COUNT` BIGINT,
  `READ_COUNT` BIGINT,
  `FILTER_COUNT` BIGINT,
  `WRITE_COUNT` BIGINT,
  `READ_SKIP_COUNT` BIGINT,
  `WRITE_SKIP_COUNT` BIGINT,
  `PROCESS_SKIP_COUNT` BIGINT,
  `ROLLBACK_COUNT` BIGINT,
  `EXIT_CODE` VARCHAR(2500),
  `EXIT_MESSAGE` VARCHAR(2500),
  `LAST_UPDATED` DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  constraint JOB_EXEC_STEP_FK foreign key (`JOB_EXECUTION_ID`)
  references `BATCH_JOB_EXECUTION`(`JOB_EXECUTION_ID`)
) ENGINE=InnoDB;

-- BATCH_JOB_EXECUTION_CONTEXT 테이블
CREATE TABLE `msa_pay`.`BATCH_JOB_EXECUTION_CONTEXT` (
  `JOB_EXECUTION_ID` BIGINT NOT NULL PRIMARY KEY,
  `SHORT_CONTEXT` VARCHAR(2500) NOT NULL,
  `SERIALIZED_CONTEXT` TEXT,
  constraint JOB_EXEC_CTX_FK foreign key (`JOB_EXECUTION_ID`)
  references `BATCH_JOB_EXECUTION`(`JOB_EXECUTION_ID`)
) ENGINE=InnoDB;

-- BATCH_STEP_EXECUTION_CONTEXT 테이블
CREATE TABLE `msa_pay`.`BATCH_STEP_EXECUTION_CONTEXT` (
  `STEP_EXECUTION_ID` BIGINT NOT NULL PRIMARY KEY,
  `SHORT_CONTEXT` VARCHAR(2500) NOT NULL,
  `SERIALIZED_CONTEXT` TEXT,
  constraint STEP_EXEC_CTX_FK foreign key (`STEP_EXECUTION_ID`)
  references `BATCH_STEP_EXECUTION`(`STEP_EXECUTION_ID`)
) ENGINE=InnoDB;

-- BATCH_STEP_EXECUTION_SEQ 시퀀스 테이블
CREATE TABLE `msa_pay`.`BATCH_STEP_EXECUTION_SEQ` (
  `ID` BIGINT NOT NULL,
  `UNIQUE_KEY` CHAR(1) NOT NULL,
  constraint UNIQUE_KEY_UN unique (`UNIQUE_KEY`)
) ENGINE=InnoDB;

-- BATCH_JOB_EXECUTION_SEQ 시퀀스 테이블
CREATE TABLE `msa_pay`.`BATCH_JOB_EXECUTION_SEQ` (
  `ID` BIGINT NOT NULL,
  `UNIQUE_KEY` CHAR(1) NOT NULL,
  constraint UNIQUE_KEY_UN unique (`UNIQUE_KEY`)
) ENGINE=InnoDB;

-- BATCH_JOB_INSTANCE_SEQ 시퀀스 테이블
CREATE TABLE `msa_pay`.`BATCH_JOB_INSTANCE_SEQ` (
  `ID` BIGINT NOT NULL,
  `UNIQUE_KEY` CHAR(1) NOT NULL,
  constraint UNIQUE_KEY_UN unique (`UNIQUE_KEY`)
) ENGINE=InnoDB;

-- 시퀀스 테이블에 초기값 삽입
INSERT INTO `msa_pay`.`BATCH_STEP_EXECUTION_SEQ` (ID, UNIQUE_KEY) VALUES (0, '0');
INSERT INTO `msa_pay`.`BATCH_JOB_EXECUTION_SEQ` (ID, UNIQUE_KEY) VALUES (0, '0');
INSERT INTO `msa_pay`.`BATCH_JOB_INSTANCE_SEQ` (ID, UNIQUE_KEY) VALUES (0, '0');

-- 인덱스 생성 (MySQL 8.0 호환)
CREATE INDEX `IDX_BATCH_JOB_INSTANCE_JOB_NAME` ON `msa_pay`.`BATCH_JOB_INSTANCE` (`JOB_NAME`);
CREATE INDEX `IDX_BATCH_JOB_EXECUTION_JOB_INSTANCE_ID` ON `msa_pay`.`BATCH_JOB_EXECUTION` (`JOB_INSTANCE_ID`);
CREATE INDEX `IDX_BATCH_JOB_EXECUTION_STATUS` ON `msa_pay`.`BATCH_JOB_EXECUTION` (`STATUS`);
CREATE INDEX `IDX_BATCH_STEP_EXECUTION_JOB_EXECUTION_ID` ON `msa_pay`.`BATCH_STEP_EXECUTION` (`JOB_EXECUTION_ID`);
CREATE INDEX `IDX_BATCH_STEP_EXECUTION_STEP_NAME` ON `msa_pay`.`BATCH_STEP_EXECUTION` (`STEP_NAME`);
CREATE INDEX `IDX_BATCH_JOB_EXEC_PARAMS_JOB_EXEC_ID` ON `msa_pay`.`BATCH_JOB_EXECUTION_PARAMS` (`JOB_EXECUTION_ID`);
